import { Interface, defaultAbiCoder as AbiCoder } from '@ethersproject/abi'
import { Address, hexToBytes } from '@ethereumjs/util'
import { Chain, Common, Hardfork } from '@ethereumjs/common'
import { LegacyTransaction, LegacyTxData } from '@ethereumjs/tx'
import { VM } from '@ethereumjs/vm'
import { Block } from '@ethereumjs/block'

export interface Params {
    types: any[];
    values: unknown[];
}

export interface TxData {
    data: string;
    nonce: bigint;
}

const encodeDeployment = (bytecode: string, params: Params) => {
    const deploymentData = '0x' + bytecode
    if (params) {
        const argumentsEncoded = AbiCoder.encode(params.types, params.values)
        return deploymentData + argumentsEncoded.slice(2)
    }
    return deploymentData
}

export const encodeFunction = (
    method: string,
    params?: Params
): string => {
    const parameters = params?.types ?? []
    const methodWithParameters = `function ${method}(${parameters.join(',')})`
    const signatureHash = new Interface([methodWithParameters]).getSighash(method)
    const encodedArgs = AbiCoder.encode(parameters, params?.values ?? [])

    return signatureHash + encodedArgs.slice(2)
}

const getAccountNonce = async (vm: VM, address: Address) => {
    const account = await vm.stateManager.getAccount(address)
    if (account) {
        return account.nonce
    } else {
        return BigInt(0)
    }
}

const buildTransaction = (data: TxData) => {
    const defaultData: LegacyTxData = {
        nonce: BigInt(0),
        gasLimit: 2_000_000, // We assume that 2M is enough,
        gasPrice: 1,
        value: 0,
        data: '0x',
    }

    return {
        ...defaultData,
        ...data,
    }
}



const getErc20Balance = async (vm: VM, contractAddress: Address, caller: Address, block: Block) => {
    const sigHash = encodeFunction('balanceOf', {
        types: ['address'],
        values: [caller.toString()],
    })

    
    const result = await vm.evm.runCall({
        to: contractAddress,
        caller: caller,
        // origin: caller, // The tx.origin is also the caller here
        data: hexToBytes(sigHash),
        block: block
    })
    
    if (result.execResult.exceptionError) {
        throw result.execResult.exceptionError
    }

    const results = AbiCoder.decode(['uint256'], result.execResult.returnValue)

    return results[0]
}

const test = async () => {
    console.log("=================BEFORE==========================");
    const customChainParams = { name: 'Binance Smart Chain Testnet', chainId: 97, networkId: 97 }
    const common = Common.custom(customChainParams, {
        hardfork: Hardfork.Berlin,
    })

    // const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Berlin })
    const vm = await VM.create({ common })
    
    const block = Block.fromBlockData({ header: { extraData: new Uint8Array(32730585) } }, { common })
    
    const accountPk = hexToBytes(
        '0xa0c31ec3759513cbdcb60bd0d3f30d298bcede28c06c5dd3b77b2b8219158de6'
    )

    const address = Address.fromPrivateKey(accountPk)
    // const address = Address.fromString("0x595622cBd0Fc4727DF476a1172AdA30A9dDf8F43")
    const nonce = await getAccountNonce(vm, address)

    // erc20
    const bytecode =
        '60806040523480156200001157600080fd5b5060405162000d0a38038062000d0a8339810160408190526200003491620002c2565b604080518082018252600f81526e27b930b4b1b430b4b7102a37b5b2b760891b6020808301918252835180850190945260048452634f52414960e01b9084015281519192916200008791600391620001e9565b5080516200009d906004906020840190620001e9565b50505060005b8151811015620000f957620000e6828281518110620000c657620000c662000394565b60200260200101516a52b7d2dcc80cd2e40000006200010160201b60201c565b620000f181620003c0565b9050620000a3565b505062000436565b6001600160a01b0382166200015c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001709190620003de565b90915550506001600160a01b038216600090815260208190526040812080548392906200019f908490620003de565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001f790620003f9565b90600052602060002090601f0160209004810192826200021b576000855562000266565b82601f106200023657805160ff191683800117855562000266565b8280016001018555821562000266579182015b828111156200026657825182559160200191906001019062000249565b506200027492915062000278565b5090565b5b8082111562000274576000815560010162000279565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002bd57600080fd5b919050565b60006020808385031215620002d657600080fd5b82516001600160401b0380821115620002ee57600080fd5b818501915085601f8301126200030357600080fd5b8151818111156200031857620003186200028f565b8060051b604051601f19603f830116810181811085821117156200034057620003406200028f565b6040529182528482019250838101850191888311156200035f57600080fd5b938501935b8285101562000388576200037885620002a5565b8452938501939285019262000364565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620003d757620003d7620003aa565b5060010190565b60008219821115620003f457620003f4620003aa565b500190565b600181811c908216806200040e57607f821691505b602082108114156200043057634e487b7160e01b600052602260045260246000fd5b50919050565b6108c480620004466000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610868565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610868565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b6020821081141561086257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088957634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122036a5d435491177d7017ed89da8cc89475a38082ba7f4ee7c391e6c989bac162a64736f6c634300080a0033'

    const data = encodeDeployment(bytecode, {
        types: ['address[]'],
        values: [[address.toString()]],
    })
    const txData: TxData = {
        data,
        nonce,
    }


    const tx = LegacyTransaction.fromTxData(buildTransaction(txData)).sign(accountPk)
    const res = await vm.runTx({ tx, skipBalance: true })
    console.log("createdAddress okok", res.createdAddress!.toString())

    // console.log(Address.fromString("0x4ABEf176F22B9a71B45ddc6c4A115095d8761b37"), Address.fromString("0x4ABEf176F22B9a71B45ddc6c4A115095d8761b37").toString())

    const balance = await getErc20Balance(vm, Address.fromString("0x4ABEf176F22B9a71B45ddc6c4A115095d8761b37"), address, block)

    console.log(balance.toString())
};
test();