import BigNumber from "bignumber.js";
import { ApplicationState, TokenAPY, UserAsset, inputCollateral } from "../../State";
import { EthAddress } from "../../utils/types";
export declare function getForkCompoundState(appState1: ApplicationState, _entity_id: string): Promise<import("../../State").Asset[]>;
export declare function getSupplyAndBorrowAPY(appState1: ApplicationState, _entity_id: string, _listTokenAddress: Array<EthAddress>): Promise<TokenAPY[]>;
export declare function getSupplyAPY(appState1: ApplicationState, _entity_id: string, _listTokenAddress: Array<EthAddress>): Promise<number[]>;
export declare function getBorrowAPY(appState1: ApplicationState, _entity_id: string, _listTokenAddress: Array<EthAddress>): Promise<number[]>;
export declare function getBorrowingAmount(appState1: ApplicationState, _entity_id: string, _listTokenAddress: Array<EthAddress>): Promise<number[]>;
export declare function getSupplyingAmount(appState1: ApplicationState, _entity_id: string, _listTokenAddress: Array<EthAddress>): Promise<number[]>;
export declare function getUserDebt(appState1: ApplicationState, _entity_id: string): Promise<UserAsset[]>;
export declare function calculateRiskValue(newTotalCollateral: BigNumber, newLiquidationThreshold: BigNumber, newTotalDebt: BigNumber): BigNumber;
export declare function getRiskValue(appState1: ApplicationState, _entity_id: string): Promise<BigNumber>;
export declare function getUserTotalCollateral(appState1: ApplicationState, _entity_id: string, _from: EthAddress): Promise<BigNumber>;
export declare function getUserAvailableBorrow(appState1: ApplicationState, _entity_id: string, _from: EthAddress): Promise<BigNumber>;
export declare function calculateMaxAmountForkCompoundSupply(appState1: ApplicationState, _entity_id: string, _tokenAddress: string, _from: EthAddress): Promise<BigNumber>;
export declare function calculateMaxAmountForkCompoundBorrow(appState1: ApplicationState, _entity_id: string, _tokenAddress: string, _from: EthAddress): Promise<BigNumber>;
export declare function calculateMaxAmountForkCompoundWithdraw(appState1: ApplicationState, _entity_id: string, _tokenAddress: string, _from: EthAddress): Promise<BigNumber>;
export declare function calculateMaxAmountForkCompoundRepay(appState1: ApplicationState, _entity_id: string, _tokenAddress: string, _from: EthAddress): Promise<BigNumber>;
export declare function SimulationSupplyForkCompoundLP(appState1: ApplicationState, _from: EthAddress, _entity_id: string, _tokenAddress: EthAddress, _amount: string): Promise<ApplicationState>;
export declare function SimulationWithdrawForkCompoundLP(appState1: ApplicationState, _from: EthAddress, _to: EthAddress, _entity_id: string, _tokenAddress: EthAddress, _amountToken: string): Promise<ApplicationState>;
export declare function SimulationBorrowForkCompoundLP(appState1: ApplicationState, _from: EthAddress, _to: EthAddress, _entity_id: string, _tokenAddress: EthAddress, _amount: string): Promise<ApplicationState>;
export declare function SimulationRepayForkCompoundLP(appState1: ApplicationState, _from: EthAddress, _entity_id: string, _tokenAddress: EthAddress, _amount: string): Promise<ApplicationState>;
export declare function SimulationCollateral(appState1: ApplicationState, _from: EthAddress, _entity_id: string, _collateralList: Array<inputCollateral>): Promise<ApplicationState>;
export declare function cTokenToDetailTokenAddress(appState1: ApplicationState, _from: EthAddress, _entity_id: string, cTokenAddress: EthAddress): string;
export declare function detailTokenAddressToCToken(appState1: ApplicationState, _from: EthAddress, _entity_id: string, detailTokenAddress: EthAddress): string;
export declare function SimulationClaimRewardsForkCompoundLP(appState1: ApplicationState, _idLP: string): Promise<ApplicationState>;
